
[general]

static=yes

writeprotect=no

extenpatternmatchnew=yes

clearglobalvars=no

[globals]


[call-firewall]

; This is a restricted router so safe to expose publically, only allows access to DDI and extensions

exten => _X.,1,NoOp(Firewalled call route request to ${EXTEN})
exten => _8XX,1,GoTo(shortcodes,${EXTEN},1)


[call-router]

; Beware - you can dial anytriuhg from here so make sure only calls from trusted sources get here

exten => _*XX,1,GoTo(shortcodes,${EXTEN},1)
exten => _0X.,1,Goto(dial-external,${EXTEN},1)
exten => _[67]XX,1,GoTo(dial-modems,${EXTEN},1)
exten => _8XX,1,GoTo(dial-extensions,${EXTEN},1)
exten => _1XX,1,GoTo(dial-extensions,${EXTEN},1)

[dial-external]

; Not set this up yet so wait a bit and hang up

exten => _0X.,1,NoOp(external call saught to ${EXTEN})
 same => n,Answer()
 same => n,Wait(2)
 same => n,Hangup()

[guest-inbound]

; Be careful here - anonymous inbound calling

exten => s,1,Wait(1)                    ; Wait a second, just for fun
 same => n,Answer()                   ; Answer the line
 same => n(restart),BackGround(demo-congrats) ; Play a congratulatory message
 same => n,Hangup()


[dial-extensions]

switch => Realtime/@

; I think we need this to load the gosub, not sure
include => stdexten

; Lets try to call a local device
; All local devices are 8XX
; shortcodes are *XX
; anytihg starting with 0 is assumed remote

exten => _1XX,1,Dial(PJSIP/${EXTEN})
exten => _8XX,1,Dial(PJSIP/${EXTEN})

;exten => _8XX,1,NoOp(Calling device on ${EXTEN})
; same => n,Gosub(${EXTEN},stdexten(PJSIP/${EXTEN}))

;exten => _1XX,1,NoOp(Calling device on ${EXTEN})
; same => n,Gosub(${EXTEN},stdexten(PJSIP/${EXTEN}))

[dial-modems]

exten => _XXX,1,NoOp(Calling modem on ${EXTEN})
 same => n,Dial(IAX2/${EXTEN})

[shortcodes]

exten => *88,1,Verbose(2,Performing Festival test)
  same => n,Answer()
  same => n,System(echo "We are now doing Festival Test after successful installation" | /usr/bin/text2wave -scale 1.5 -F 8000 -o /tmp/test.wav)
  same => n,Playback(/tmp/test)
  same => n,System(rm -f /tmp/test.wav)
  same => n,Hangup()

exten => *77,1,NoOp(Time: ${EXTEN} ${timezone})
 same => n,Wait(0.25)
 same => n,Answer()
; the amount of delay is set for English; you may need to adjust this time
; for other languages if there's no pause before the synchronizing beep.
 same => n,Set(FUTURETIME=$[${EPOCH} + 12])
 same => n,SayUnixTime(${FUTURETIME},Zulu,HNS)
 same => n,SayPhonetic(z)
; use the timezone associated with the extension (sip only), or system-wide
; default if one hasn't been set.
 same => n,SayUnixTime(${FUTURETIME},${timezone},HNS)
 same => n,Playback(spy-local)
 same => n,WaitUntil(${FUTURETIME})
 same => n,Playback(beep)

;; some subroutines

[stdexten]
;
; Standard extension subroutine:
;   ${EXTEN} - Extension
;   ${ARG1} - Device(s) to ring
;   ${ARG2} - Optional context in Voicemail
;
; Note that the current version will drop through to the next priority in the
; case of their pressing '#'.  This gives more flexibility in what do to next:
; you can prompt for a new extension, or drop the call, or send them to a
; general delivery mailbox, or...
;
; The use of the LOCAL() function is purely for convenience.  Any variable
; initially declared as LOCAL() will disappear when the innermost Gosub context
; in which it was declared returns.  Note also that you can declare a LOCAL()
; variable on top of an existing variable, and its value will revert to its
; previous value (before being declared as LOCAL()) upon Return.
;
exten => _X.,50000(stdexten),NoOp(Start stdexten for ${ARG1})
 same => n,Set(LOCAL(ext)=${EXTEN})
 same => n,Set(LOCAL(dev)=${ARG1})
 same => n,Set(LOCAL(cntx)=${ARG2})
 same => n,Set(LOCAL(mbx)=${ext}${IF($[!${ISNULL(${cntx})}]?@${cntx})})
 same => n,Dial(${dev},20)                          ; Ring the interface, 20 seconds maximum
 same => n,Goto(stdexten-${DIALSTATUS},1)           ; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)        ; If unavailable, send to voicemail w/ unavail announce
 same => n,Return()                   ; If they press #, return to start



exten => stdexten-BUSY,1,VoiceMail(${mbx},b)            ; If busy, send to voicemail w/ busy announce
 same => n,Return()                       ; If they press #, return to start


exten => _stde[x]te[n]-.,1,NoOp(${DIALSTATUS})    ; Treat anything else as no answer
;exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)    ; Treat anything else as no answer

exten => a,1,VoiceMailMain(${mbx})                      ; If they press *, send the user into VoicemailMain
exten => a,n,Return()




